pipeline {
    agent any  // Agent

    environment {
        NODE_ENV = 'development' // Variáveis de ambiente customizadas
        BUILD_VERSION = '1.0.0'
        CREDENTIALS_ID = credentials('my-git-credentials')  // Armazena credenciais seguras
    }

    options {
        timeout(time: 1, unit: 'HOURS')  // Tempo máximo de execução do pipeline
        buildDiscarder(logRotator(numToKeepStr: '5'))  // Manter apenas os últimos 5 builds
    }

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Branch name to build') // Nome da branch a ser construída
        booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'Run tests after build') // Executar testes após a construção
    }

    triggers {
        cron('H 2 * * 1')  // Executar todas as segundas-feiras às 2:00 AM
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm  // Checkout do código fonte
            }
        }

        stage('Build') {
            steps {
                script {
                    echo "Building version ${BUILD_VERSION}..."  // Passos para a fase de construção
                }
            }
        }

        stage('Test') {
            when {
                expression { params.RUN_TESTS }  // Executar testes somente se RUN_TESTS for verdadeiro
            }
            steps {
                script {
                    echo "Running tests..."
                    if (isUnix()) {
                        sh 'npm install'  // Instala as dependências do projeto para Unix/Linux
                        sh 'npm test'  // Executa todos os testes para Unix/Linux
                    } else {
                        bat 'npm install'  // Instala as dependências do projeto para Windows
                        bat 'npm test'  // Executa todos os testes para Windows
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    echo "Waiting for approval..."  // Mensagem de depuração
                }
                input message: 'Approve Deployment?', ok: 'Deploy'  // Aprovação manual para implantação
                script {
                    echo "Deploying version ${BUILD_VERSION}..."  // Passos para a fase de implantação
                }
            }
        }

        stage('Parallel Steps') {
            parallel {
                stage('Parallel Stage 1') {
                    steps {
                        script {
                            echo "Running parallel stage 1..."  // Executando estágio paralelo 1
                        }
                    }
                }
                stage('Parallel Stage 2') {
                    steps {
                        script {
                            echo "Running parallel stage 2..."  // Executando estágio paralelo 2
                        }
                    }
                }
            }
        }

        stage('Matrix Example') {
            matrix {
                axes {
                    axis {
                        name 'OS'
                        values 'Windows', 'Linux'  // Valores para a variável 'OS'
                    }
                    axis {
                        name 'JDK'
                        values 'JDK8', 'JDK11'  // Valores para a variável 'JDK'
                    }
                }
                stages {
                    stage('Build') {
                        steps {
                            script {
                                echo "Building on ${OS} with ${JDK}..."  //  Construindo com diferentes variáveis de ambiente
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Build succeeded!'  // Ações após um build bem-sucedido
        }
        failure {
            echo 'Build failed!'  // Ações após um build com falha
        }
        always {
            echo 'Cleaning up...'  // Ações que devem sempre ser executadas
        }
    }
}