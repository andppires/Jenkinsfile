pipeline {
    agent any

    environment {
        // Variáveis de ambiente
        NODE_ENV = 'development'
        BUILD_VERSION = '1.0.0'
    }

    options {
        // Opções do pipeline
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }

    parameters {
        // Parâmetros de entrada
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Branch name to build')
        booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'Run tests after build')
    }

    triggers {
        // Triggers para iniciar o pipeline
        cron('H 2 * * 1')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                script {
                    echo "Building version ${BUILD_VERSION}..."
                }
            }
        }

        stage('Test') {
            when {
                expression { params.RUN_TESTS }
            }
            steps {
                script {
                    echo "Running tests..."
                }
            }
        }

        stage('Deploy') {
            steps {
                input message: 'Approve Deployment?', ok: 'Deploy'
                script {
                    echo "Deploying version ${BUILD_VERSION}..."
                }
            }
        }

        stage('Parallel Steps') {
            parallel {
                stage('Parallel Stage 1') {
                    steps {
                        script {
                            echo "Running parallel stage 1..."
                        }
                    }
                }
                stage('Parallel Stage 2') {
                    steps {
                        script {
                            echo "Running parallel stage 2..."
                        }
                    }
                }
            }
        }

        stage('Matrix Example') {
            matrix {
                axes {
                    axis {
                        name 'OS'
                        values 'Windows', 'Linux'
                    }
                    axis {
                        name 'JDK'
                        values 'JDK8', 'JDK11'
                    }
                }
                stages {
                    stage('Build') {
                        steps {
                            script {
                                echo "Building on ${OS} with ${JDK}..."
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Build succeeded!'
        }
        failure {
            echo 'Build failed!'
        }
        always {
            echo 'Cleaning up...'
        }
    }
}